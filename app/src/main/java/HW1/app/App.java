/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HW1.app;

import HW1.list.LinkedList;


import java.util.ArrayList;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import static spark.Spark.port;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.LogManager;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

import static HW1.utilities.StringUtils.join;
import static HW1.utilities.StringUtils.split;;

public class App {
    public static boolean search(ArrayList<Integer> array, int e) {
      System.out.println("inside search");
      if (array == null) return false;

      for (int elt : array) {
        if (elt == e) return true;
      }
      return false;
    }
    public static int biggestNorm(ArrayList<Integer> vector_x, ArrayList<Integer> vector_y, ArrayList<Integer> vector_z ){
      double maxNorm = 0;
      int maxIndex = -1;
      if(vector_x == null || vector_y == null || vector_z == null){
        return -1;
      }
      if(vector_x.size() != vector_y.size() || vector_x.size()!=vector_z.size() || vector_x.size() == 0){
        return -1;
      }
      for (int i = 0; i < vector_x.size();i++) {
        double norm = Math.pow(vector_x.get(i), 2) + Math.pow(vector_y.get(i), 2)+Math.pow(vector_z.get(i), 2);
        norm = Math.sqrt(norm);
        if (norm >= maxNorm){
          maxNorm = norm;
          maxIndex = i;
        }
      }

      return maxIndex;
    }

    public static void main(String[] args) {    
        port(getHerokuAssignedPort());
        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);
        get("/", (req, res) -> "Welcome to the calculator.To run the calculator add /compute to the end of the link");
        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));
          ////////x vector
          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> vector_x = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            vector_x.add(value);
          }
          sc1.close();
          System.out.println(vector_x);

          ////////y vector

          String input2 = req.queryParams("input2");
          java.util.Scanner sc2 = new java.util.Scanner(input2);
          sc2.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> vector_y = new java.util.ArrayList<>();
          while (sc2.hasNext())
          {
            int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
            vector_y.add(value);
          }
          sc2.close();
          System.out.println(vector_y);

          ////////z vector

          String input3 = req.queryParams("input3");
          java.util.Scanner sc3 = new java.util.Scanner(input3);
          sc3.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> vector_z = new java.util.ArrayList<>();
          while (sc3.hasNext())
          {
            int value = Integer.parseInt(sc3.next().replaceAll("\\s",""));
            vector_z.add(value);
          }
          sc3.close();
          System.out.println(vector_z);


          
          int result = App.biggestNorm(vector_x,vector_y,vector_z);
          String str_result = "";
          if(result == -1){
            str_result = "Wrong input :( read the rules";
          }else{
            str_result = vector_x.get(result)+", "+ vector_y.get(result) +", "+vector_z.get(result);
          }
          
          
          Map<String, String> map = new HashMap<String, String>();
          map.put("result",str_result );
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result is ", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }

}

